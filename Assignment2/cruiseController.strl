% Cruise Speed Management

module SpeedManagement:
	input speed : float;
	input on, set, quickAccel, quickDecel;
	output cruiseSpeed : float; 
	output cruiseState : integer;

	function checkSpeedInRange(float) : boolean;
	function checkSpeedIncrement(float) : boolean;
	function checkSpeedDecrement(float) : boolean;
	
	var onPressedOut := false : boolean, isEnabled := false : boolean, speedInRange : boolean, checkSpeedInc : boolean, checkSpeedDec : boolean in
	var speedInc := 2.5f : float, speedOut := 0.0f : float, cruiseSpeedOut := 0.0f : float in
	loop
		pause;
			speedOut := ?speed;
			if (?speed > 150.0f) then
				speedOut := 150.0f;
			elsif (?speed < 30.0f) then
				speedOut := 30.0f;
			end if;
			
			speedInRange := checkSpeedInRange(speedOut);
			checkSpeedInc := checkSpeedIncrement(cruiseSpeedOut);
			checkSpeedDec := checkSpeedDecrement(cruiseSpeedOut);

			% Conditions to set and reset isEnabled
			if (not isEnabled and (?cruiseState = 2 or ?cruiseState = 3 or ?cruiseState = 4)) then
				isEnabled := true;
				onPressedOut := false;

			elsif (?cruiseState = 1) then
				isEnabled := false;
			end if;
			% Initially set cruise speed when on pressed (This should only update once)
			present on then
				if (not(onPressedOut) and speedInRange and isEnabled) then
					cruiseSpeedOut := speedOut;
					onPressedOut := true;
				end if;
			end present;

			% If set is pressed thereafter, set the new speed
			present set then
				if (isEnabled and onPressedOut and speedInRange) then
					cruiseSpeedOut := speedOut;
				end if;
			end present;

			% Check if incrementing speed will still be within range 
			% Also make sure both quickAccel and quickDecel arent true at the same time
			present quickAccel then
				if (isEnabled and checkSpeedInc) then
					cruiseSpeedOut := cruiseSpeedOut + speedInc;
				end if;
			end present;
			
			% Check if decrementing speed will still be within range
			present quickDecel then
				if (isEnabled and checkSpeedDec ) then
					cruiseSpeedOut := cruiseSpeedOut - speedInc;
				end if;
			end present;

			emit cruiseSpeed(cruiseSpeedOut);
	end loop
	end var
	end var

end module


% Cruise state management module, handles state transitions
module StateController:
	input on, off, resume;
	input speed : float, accel : float, brake : float;

	% Cruise State:
	% 	1 = OFF
	% 	2 = ON
	% 	3 = STDBY
	% 	4 = DISABLE
	output cruiseState : integer;

	function checkAccelPedal(float) : boolean;
	function checkBrakePedal(float) : boolean;
	function checkSpeedInRange(float) : boolean;

	% Brake Pressed and AccelPressed cannot be high at the same time
	% relation brakePressed # accelPressed;

	var currentState := 1 : integer in
	var speedInRange : boolean, accelPressed : boolean, brakePressed : boolean in
	loop
		pause;
		speedInRange := checkSpeedInRange(?speed);
		accelPressed := checkAccelPedal(?accel);
		brakePressed := checkBrakePedal(?brake);

		trap enteredOn in
			% Move to OFF when off pressed (priority)
			present off then
				currentState := 1;
				emit cruiseState(currentState);
				exit enteredOn;
			end present;

			%  Output ON when on button pressed, accelerator not pressed, and speed in range
			
			present on then
				currentState := 2;
				emit cruiseState(currentState);
				exit enteredOn;
			end present;

			% Move to STDBY if the brake is pressed (priority)
			if (brakePressed and (currentState = 2 or currentState = 3 or currentState = 4)) then
				currentState := 3;
				emit cruiseState(currentState);
				exit enteredOn;
			end if;

			if (currentState = 2) then
				if (not(accelPressed) and speedInRange) then
					currentState := 2;
					emit cruiseState(currentState);
					exit enteredOn;

				% Move from ON to DISABLE when accelPressed = false and speed isnt in bounds
				elsif (accelPressed or not(speedInRange)) then
					currentState := 4;
					emit cruiseState(currentState);
					exit enteredOn;
				end if;
			end if;

			present resume then
				if (currentState = 3) then

					% Move from STDBY to ON when resume pressed, acelerator not pressed, and speed in range
					if (not(accelPressed) and speedInRange) then
						currentState := 2;
						emit cruiseState(currentState);
						exit enteredOn;

					% Move from STDBY to DISABLE when resume and (accelerator pressed or speed not in range)
					elsif (accelPressed or not(speedInRange)) then
						currentState := 4;
						emit cruiseState(currentState);
						exit enteredOn;
					end if;
				end if;
			end present;

			% Move from DISABLE to ON if accelerator not pressed and speed in range
			if (currentState = 4 and not(accelPressed) and speedInRange) then
				currentState := 2;
				emit cruiseState(currentState);
				exit enteredOn;
			end if;
		end trap
	end loop
	end var
	end var
end module

% Car Driving Control
module DrivingControl:
	input cruiseState : integer, accel : float;
	input speed : float, cruiseSpeed : float;
	output throttleCmd : float;

	% Regulate and saturate throttle given conditions
	function regulateThrottle(integer, float, float) : float;
	
	var throttleCmdOut := 0.0f : float, currentState := 0 : integer, isGoingOn := 0 : integer, enteredOn := false : boolean in 
	loop
		pause;
			currentState := ?cruiseState;
			% Reset isGoingOn when moving to another state
			if (currentState = 1 or currentState = 3 or currentState = 4) then
				isGoingOn := 0;
				enteredOn := false;
			end if;
			
			% Accelerator state, throttleCmd driven by accelerator when cruise OFF
			if (currentState = 1) then
				throttleCmdOut:= ?accel;
			
			% Regulation state, throttleCmd driven by regulate functions when cruise ON
			% Set isGoingOn only when it has JUST moved from another state to ON, otherwise false
			elsif (not enteredOn and currentState = 2) then
				isGoingOn := 1;
				enteredOn := true;
				throttleCmdOut := regulateThrottle(isGoingOn, ?cruiseSpeed, ?speed);
			
			% If we stay in the ON state, don't reset integral part (i.e isGoingOn = 0 (false))
			elsif (enteredOn and currentState = 2) then
				isGoingOn := 0;
				throttleCmdOut := regulateThrottle(isGoingOn, ?cruiseSpeed, ?speed);				
			end if;
			
			emit throttleCmd(throttleCmdOut);
	end loop
	end var
end module


% Toplevel module running
module CruiseController:

	% Visible inputs/outputs StateController
	input on, off, resume, set;
	input quickAccel, quickDecel;
	input accel := 0.0f : float, brake := 0.0f : float, speed := 0.0f : float;
	
	output cruiseSpeed := 0.0f : float;
	output throttleCmd := 0.0f : float;
	output cruiseState := 1 : integer;

	run StateController 
	[
		signal accel/accel;
		signal brake/brake;
		signal cruiseState/cruiseState
	]

	||

	run SpeedManagement
	[
		signal speed/speed;
		signal cruiseSpeed/cruiseSpeed;
		signal cruiseState/cruiseState
	]

	||

	run DrivingControl
	[
		signal cruiseSpeed/cruiseSpeed;
		signal speed/speed;
		signal throttleCmd/throttleCmd;
		signal accel/accel;
		signal cruiseState/cruiseState
	]

end module

