% pedal detection (Krithik)
module PedalDetection:
	input brake : double;
	input accel : double;
	
	output accelPressed : boolean;
	output brakePressed : boolean;

	var pedalsMin := 0.03 : double in
		loop
			pause;
				% Emit if pedal pressed enough
				if (?accel >= 0.03) then
					emit accelPressed(true)
				elsif (?brake >= 0.03) then
					emit brakePressed(true)
				end if;

				% Reset accelPressed/brakePressed when input low
				if (?accel < 0.03) then
					emit accelPressed(false)
				end if;

				if (?brake < 0.03) then
					emit brakePressed(false)
				end if;
		end loop
	end var

end module
% Procedures

% Interface declarations


% pedal detection (Krithik)

% Cruise Speed Management (Krithik)


% Cruise State Management (Krishen)


%%Defined enum
module StateController:

	%Input and Output Definition
	% Cruise State:
		% 0 = OFF
		% 1 = ON
		% 2 = STDBY
		% 3 = DISABLE
	
	% Speed in range = speedMin < speed < speedMax
	input off : boolean;
	input on : boolean;
	input resume : boolean;
	input brakePressed : boolean;
	input accelPressed : boolean;
	input speed := 50.0 : double;
	output cruiseState : integer;

	% Brake Pressed and AccelPressed cannot be high at the same time
	relation brakePressed # accelPressed;

	var speedInRange : boolean in
	loop	
		pause;
		var speedMin := 30.0 : double, speedMax := 150.0 : double in

		% IDK the AND operator so youll have to try find that
		if (?speed >= speedMin and ?speed <= speedMax) then
			emit cruiseState(1)
		end if;
		end var
	end loop
	end var

	
	


end module

% Car Driving Control (Krishen)

% Toplevel module running
module cruiseController:

% Visible outputs StateController
output cruiseState1 := 0 : integer;
output accelPresseed1 : boolean;
output brakePressed1 : boolean;
output cruiseSpeed : double;
input speed1 : double;
input on1  : boolean;
input off1 : boolean;
input resume1 : boolean;
input accel1 : double;
input brake1 : double;


	run PedalDetection 
	[
		signal brake1/brake;
		signal accel1/accel;
		signal accelPresseed1/accelPressed;
		signal brakePressed1/brakePressed
	]
	
	||

	run StateController 
	[
		signal cruiseState1/cruiseState;
		signal on1/on;
		signal off1/off;
		signal resume1/resume;
		signal brakePressed1/brakePressed;
		signal accelPresseed1/accelPressed;
		signal speed1/speed
	]

end module

